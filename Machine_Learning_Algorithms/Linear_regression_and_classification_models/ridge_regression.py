from sklearn.linear_model import LinearRegression
from sklearn.datasets import make_regression
from sklearn.linear_model import Ridge
import matplotlib.pyplot as plt
import numpy as np

if __name__ == '__main__':
    X, Y = make_regression(n_features=1, noise=10, n_samples=1000)
    outliers = Y[950:] - 600
    Y_out = np.append(Y[:950], outliers)
    plt.scatter(X, Y_out, s=5)
    plt.plot()
    plt.show()
    lr = LinearRegression()
    lr.fit(X, Y)
    predict = lr.predict(X)
    ridge = Ridge(alpha=0.1)
    lr = LinearRegression()
    ridge.fit([[0, 0], [0, 0], [1, 1]], [0, .1, 1])
    lr.fit([[0, 0], [0, 0], [1, 1]], [0, .1, 1])
    print(ridge.coef_)
    print(lr.coef_)
    lr = LinearRegression()
    lr.fit(X, Y_out)
    predicted_outliers = lr.predict(X)
    plt.scatter(X, Y_out, s=5, label='actual')
    plt.scatter(X, predicted_outliers, s=5, label='prediction with outliers')
    plt.scatter(X, predict, s=5, c='k', label='prediction without outlier')
    plt.legend()
    plt.title('Linear Regression')
    plt.plot()
    plt.show()
    ridge = Ridge(alpha=1000)
    ridge.fit(X, Y_out)
    predicted_ridge = ridge.predict(X)
    plt.scatter(X, Y_out, s=5, label='actual')
    plt.scatter(X, predicted_outliers, s=5, c='r', label='LinearRegression with outliers')
    plt.scatter(X, predicted_ridge, s=5, c='k', label='RidgeRegression with outlier')
    plt.legend()
    plt.title('Linear Regression')
    plt.plot()
    plt.show()
    print(ridge.coef_)
    X, y, w = make_regression(n_samples=10, n_features=10, coef=True, random_state=1, bias=3.5)
    print(w)
    alphas = np.logspace(-6, 6, 200)
    print(alphas[:20])
    coefficients = []
    for a in alphas:
        ridge = Ridge(alpha=a, fit_intercept=False)
        ridge.fit(X, y)
        coefficients.append(ridge.coef_)
    ax = plt.gca()
    ax.plot(alphas, coefficients)
    ax.set_xscale('log')
    plt.xlabel('alpha')
    plt.ylabel('weights')
    plt.title('Ridge coefficients as a function of the regularization')
    plt.plot()
    plt.show()
